git init :把这个目录变成Git可以管理的仓库（repository）
git add <filename> :把这个文件添加到仓库（每次修改文件后都要添加一次文件，然后commit）
git commit -m "some info" :把文件提交到仓库，并添加相关信息
git status :仓库当前状态，显示哪些文件修改了
git diff :查看做了哪些修改

版本回退：
git log :查看日志，添加--pretty=online参数，显示简易信息。
git reset --hard HEAD^ :回退到上一个版本，如果是HEAD^^则是回退到上上一个版本，有几个^,就回退几个版本，如果回退版本太多，则可以使用HEAD~n,n是回退的版本数
（疑问：创建了两个文档，并且两个文档近期有交叉修改，按照以上方法回退一个文档时，另外一个文档也回退了，这并不是我希望的。没有办法指定回退的文档，只能回退整个仓库？）
git reset --hard <id> :回退到指定ID的版本（git中回退后，当前版本以后创建的都看不见了，如果此时后悔了，则只要知道后面版本的ID就可以再次回去了。如何知道回退后版本ID，见下面命令）
git reflog :记录你的每一次命令，包含了你所操作文档的ID

工作区和暂存区：
git add 是将工作区的内容提交到暂存区，git commit是将暂存区的内容提交到唯一的master分区，此时暂存区内容清空。

撤销修改：
git checkout -- <file> :如果修改文件，但还没有add到暂存区，使用该命令可以撤销工作区内文件的修改（该命令的实质是用版本库的文件替换工作区的文件内容）（版本库包括暂存区和分支）
git reset HEAD <file> :如果修改了文件，并且已经add到了暂存区，使用该命令可以将暂存区的文件回撤到工作区。此时使用上一条命令撤销修改。
如果修改文件已经提交到了版本库，但是还没有推送到远程版本库，要修改就参照版本回退内容。

删除文件：
git rm <file> :在文件管理器中删除文件后，还需要在版本库中删除版本，使用该命令删除版本库中的版本，该命令之后还需要使用git commit命令提交
git checkout -- <file> :如果在文件管理器中不小心删除了文件，可以使用该命令从版本库中恢复文件。（但在工作区修改但未提交的文件无法恢复。）




