教程网址：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

git init :把这个目录变成Git可以管理的仓库（repository）
git add <filename> :把这个文件添加到仓库（每次修改文件后都要添加一次文件，然后commit）
git commit -m "some info" :把文件提交到仓库，并添加相关信息
git status :仓库当前状态，显示哪些文件修改了
git diff :查看做了哪些修改

版本回退：
git log :查看日志，添加--pretty=online参数，显示简易信息。
git reset --hard HEAD^ :回退到上一个版本，如果是HEAD^^则是回退到上上一个版本，有几个^,就回退几个版本，如果回退版本太多，则可以使用HEAD~n,n是回退的版本数
（疑问：创建了两个文档，并且两个文档近期有交叉修改，按照以上方法回退一个文档时，另外一个文档也回退了，这并不是我希望的。没有办法指定回退的文档，只能回退整个仓库？）
git reset --hard <id> :回退到指定ID的版本（git中回退后，当前版本以后创建的都看不见了，如果此时后悔了，则只要知道后面版本的ID就可以再次回去了。如何知道回退后版本ID，见下面命令）
git reflog :记录你的每一次命令，包含了你所操作文档的ID

工作区和暂存区：
git add 是将工作区的内容提交到暂存区，git commit是将暂存区的内容提交到唯一的master分区，此时暂存区内容清空。

撤销修改：
git checkout -- <file> :如果修改文件，但还没有add到暂存区，使用该命令可以撤销工作区内文件的修改（该命令的实质是用版本库的文件替换工作区的文件内容）（版本库包括暂存区和分支）
git reset HEAD <file> :如果修改了文件，并且已经add到了暂存区，使用该命令可以将暂存区的文件回撤到工作区。此时使用上一条命令撤销修改。
如果修改文件已经提交到了版本库，但是还没有推送到远程版本库，要修改就参照版本回退内容。

删除文件：
git rm <file> :在文件管理器中删除文件后，还需要在版本库中删除版本，使用该命令删除版本库中的版本，该命令之后还需要使用git commit命令提交
git checkout -- <file> :如果在文件管理器中不小心删除了文件，可以使用该命令从版本库中恢复文件。（但在工作区修改但未提交的文件无法恢复。）

远程仓库：
需要将本地仓库和远程仓库关联，这里以github为远程仓库为例，首先需要创建SSH Key，并添加到github上，使得本地向github推送。步骤如下：
步骤一：在git命令行输入如下命令> ssh-keygen -t rsa -C "<youremail@example.com>",一路回车，查看主目录下是否有.ssh目录。当然如果本来就存在.ssh目录，则这一步可以跳过。
步骤二：登陆GitHub，打开“Account settings”，“SSH Keys”页面，将.ssh文件夹下id_rsa.pub的内容添加到SSH Key列表中。
经过以上步骤，就可以保证本地和github可以正常通信了。下面是两种用法：

1.将本地库和远程库关联，并向远程库推送
你创建了一个本地仓库，现在你想把本地仓库推送到远程仓库并和远程仓库同步
步骤一：在github上创建一个仓库，并命名,假设为learngit
步骤二：使用> git remote add origin git@github.com:youremail/learngit.git
步骤三：推送本地仓库到github，使用命令>git push -u origin master，参数-u可以让远程仓库和本地仓库关联（第一次用，以后不需要）。
以后只要本地提交了修改，就可以使用>git push origin master推送到远程仓库。

2.从远程库克隆仓库到本地
前提是本地没有将要克隆的仓库，否则报错。以github为例说明，假设远程库已经存在，名为gitlearn
git clone git@github.com:<youremail>/gitlearn.git :执行该命令后，当前文件夹下就多出一个gitlearn的仓库（这里使用的是SSH协议传输，也可以使用HTTPS协议传输）

分支管理：
1.创建与合并分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

2.解决冲突
当分支文档的内容和master的内容有冲突时，无法将该分支和master合并，必须解决冲突后才能合并。解决的办法是在master分支下修改冲突，然后保存。
git log --graph ：该命令可以看到分支合并图

3.分支管理策略
一般不再master分支上工作，大家都在自己的分支上工作，并不断提交代码到一个公共的工作分支dev上，需要发布版本时才由dev分支commit到master上。
git merge --no-ff -m "merge with no-ff" <branch> :不使用Fast forward方式合并，保留了合并信息。（不是很懂）

4.bug分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；哪里出现bug就从哪里创建分支。
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
git stash ：需要离开当前工作现场，但是目前的工作不能上传，则使用该命令在不上传的基础上保存工作现场，之后可以恢复
git stash pop ：恢复之前保存的工作现场，并从保存列表中删除恢复的现场。
git stash list ：列出所有保存的工作现场。。
git stash apply stash@{0} ：恢复指定的工作现场。
git stash drop :删除保存的工作现场。
使用apply恢复则需要手动删除列表中的工作现场，但是使用pop命令，则不需要手动删除。

5.Feature分支
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
分支合并和bug分支的操作一致。

6.多人协作：
多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin <branch-name>，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b <branch-name> origin/<branch-name>，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream <b
ranch-name> origin/<branch-name>；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


标签管理：
1.创建标签：
git tag <name> ：在当前分支的当前状态上打上标签
git tag <name> <commit ID> :在指定的commit ID上打标签
git tag :查看所打的标签。
git show <tag name> :查看指定标签的信息
git tag -a <tag name> -m "some info" <commit id> :创建带说明的标签

2.操作标签
git tag -d <tag name> :删除指定的标签





