教程网址：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

git init :把这个目录变成Git可以管理的仓库（repository）
git add <filename> :把这个文件添加到仓库（每次修改文件后都要添加一次文件，然后commit）
git commit -m "some info" :把文件提交到仓库，并添加相关信息
git status :仓库当前状态，显示哪些文件修改了
git diff :查看做了哪些修改

版本回退：
git log :查看日志，添加--pretty=online参数，显示简易信息。
git reset --hard HEAD^ :回退到上一个版本，如果是HEAD^^则是回退到上上一个版本，有几个^,就回退几个版本，如果回退版本太多，则可以使用HEAD~n,n是回退的版本数
（疑问：创建了两个文档，并且两个文档近期有交叉修改，按照以上方法回退一个文档时，另外一个文档也回退了，这并不是我希望的。没有办法指定回退的文档，只能回退整个仓库？）
git reset --hard <id> :回退到指定ID的版本（git中回退后，当前版本以后创建的都看不见了，如果此时后悔了，则只要知道后面版本的ID就可以再次回去了。如何知道回退后版本ID，见下面命令）
git reflog :记录你的每一次命令，包含了你所操作文档的ID

工作区和暂存区：
git add 是将工作区的内容提交到暂存区，git commit是将暂存区的内容提交到唯一的master分区，此时暂存区内容清空。

撤销修改：
git checkout -- <file> :如果修改文件，但还没有add到暂存区，使用该命令可以撤销工作区内文件的修改（该命令的实质是用版本库的文件替换工作区的文件内容）（版本库包括暂存区和分支）
git reset HEAD <file> :如果修改了文件，并且已经add到了暂存区，使用该命令可以将暂存区的文件回撤到工作区。此时使用上一条命令撤销修改。
如果修改文件已经提交到了版本库，但是还没有推送到远程版本库，要修改就参照版本回退内容。

删除文件：
git rm <file> :在文件管理器中删除文件后，还需要在版本库中删除版本，使用该命令删除版本库中的版本，该命令之后还需要使用git commit命令提交
git checkout -- <file> :如果在文件管理器中不小心删除了文件，可以使用该命令从版本库中恢复文件。（但在工作区修改但未提交的文件无法恢复。）

远程仓库：
需要将本地仓库和远程仓库关联，这里以github为远程仓库为例，首先需要创建SSH Key，并添加到github上，使得本地向github推送。步骤如下：
步骤一：在git命令行输入如下命令> ssh-keygen -t rsa -C "<youremail@example.com>",一路回车，查看主目录下是否有.ssh目录。当然如果本来就存在.ssh目录，则这一步可以跳过。
步骤二：登陆GitHub，打开“Account settings”，“SSH Keys”页面，将.ssh文件夹下id_rsa.pub的内容添加到SSH Key列表中。
经过以上步骤，就可以保证本地和github可以正常通信了。下面是两种用法：

1.将本地库和远程库关联，并向远程库推送
你创建了一个本地仓库，现在你想把本地仓库推送到远程仓库并和远程仓库同步
步骤一：在github上创建一个仓库，并命名,假设为learngit
步骤二：使用> git remote add origin git@github.com:youremail/learngit.git
步骤三：推送本地仓库到github，使用命令>git push -u origin master，参数-u可以让远程仓库和本地仓库关联（第一次用，以后不需要）。
以后只要本地提交了修改，就可以使用>git push origin master推送到远程仓库。

2.从远程库克隆仓库到本地
前提是本地没有将要克隆的仓库，否则报错。以github为例说明，假设远程库已经存在，名为gitlearn
git clone git@github.com:<youremail>/gitlearn.git :执行该命令后，当前文件夹下就多出一个gitlearn的仓库（这里使用的是SSH协议传输，也可以使用HTTPS协议传输）

分支管理：
1.创建与合并分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

2.解决冲突
当分支文档的内容和master的内容有冲突时，无法将该分支和master合并，必须解决冲突后才能合并。解决的办法是在master分支下修改冲突，然后保存。
git log --graph ：该命令可以看到分支合并图

3.分支管理策略
一般不再master分支上工作，大家都在自己的分支上工作，并不断提交代码到一个公共的工作分支dev上，需要发布版本时才由dev分支commit到master上。
git merge --no-ff -m "merge with no-ff" <branch> :不使用Fast forward方式合并，保留了合并信息。（不是很懂）








